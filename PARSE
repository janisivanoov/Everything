#include <iostream>
#include <cstring>
#include <cstdlib>
using namespace std;
const int LEN = 20;
const int MAX = 10;
class Stack {
private:
	char st[MAX];
	int top;
public:
	Stack() {
		top = 0;
	}
	void push(char var) {
		st[++top] = var;
	}
	char pop() {
		return st[top--];
	}
	int gettop() {
		return top;
	}
};
class express {
private:
	Stack s;
	char* pstr;
	int len;
public:
	express(char* ptr) {
		pstr = ptr;
		len = strlen(pstr);
	}
	void parse();
	int solve();
};
void express::parse() {
	char ch;
	char lastval;
	char lasttop;
	for (int j = 0; j < len; j++) {
		ch = pstr[j];
		if (ch >= '0' && ch <= '9') {
			s.push(ch - '0');
		}
		else if (ch == '+' || ch == '-' || ch == '/') {
			if (s.gettop() == 1) {
				s.push(ch);
			}
			else {
				lastval = s.pop();
				lasttop = s.pop();
				if ((ch == '*' || ch == '/') && (lasttop == '+' || lasttop == '-')) {
					s.push(lasttop);
					s.push(lastval);
				}
				else {
					switch (lasttop) {
					case '+': s.push(s.pop() + lastval); break;
					case '-': s.push(s.pop() - lastval); break;
					case '*': s.push(s.pop() * lastval); break;
					case '/': s.push(s.pop() / lastval); break;
					}
				}
				s.push(ch);
			}
		}
		else {
			cout << "Unknown symbol!";
			exit(1);
		}
	}
}
int express::solve() {
	char lastval;
	while (s.gettop() > 1) {
		lastval = s.pop();
		switch (s.pop()) {
		case '-': s.push(s.pop() - lastval); break;
		case '+': s.push(s.pop() + lastval); break;
		case '*': s.push(s.pop() * lastval); break;
		case '/': s.push(s.pop() / lastval); break;
		}
	}
	return int(s.pop());
}
int main() {
	system("chcp 1251 > nul");
	char ans;
	char string[LEN];
	cout << "Enter arithmetic problem like 1+2*3/4-5" << "\nNumbers suppose to be only with one symbol like 1 or 1 and etc." << "\n Didint use '(' or '_'" << endl;
	do {
		cout << "Problem:";
		cin >> string;
		express* eptr = new express(string);
		eptr->parse();
		cout << "Result:" << eptr->solve();
		delete eptr;
		cout << "Another problem('y' or 'n')?";
		cin >> ans;
	} while (ans == 'y');
	system("pause > nul");
	return 0;
}
