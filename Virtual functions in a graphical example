#include <iostream>
#include <cstdlib>
#include "msoftcon.h"
using namespace std;
class shape {
private:
	int xCo, yCo;
	color fillcolor;
	fstyle fillstyle;
public:
	shape():xCo(0), yCo(0),fillcolor(cWHITE),fillstyle(SOLID_FILL){ }
	shape(int x, int e, color fc, fillcolor fs):xCo(x),yCo(y),fillcolor(fc),fillstyle(fs){ }
	virtual void draw() = 0 {
		set_color(fillcolor);
		set_fill_style(fillstyle);
	}
};
class ball :public shape {
private:
	int radius;
public:
	ball():shape (){ }
	ball(int x, int y, int r, color fc, fstyle fs): shape(x,y,fc,fs), radius(r){ }
	void draw() {
		shape::draw();
		draw_circle(xCo, yCo, radius);
	}
};
class rect :public shape {
private:
	int width, height;
public:
	rect():shape(), height(0),width(0){ }
	rect(int x, int y, int h, int w, color fc, style fs):shape(x,y,fc,fs),height(h),width(w){ }
	void draw() {
		shape::draw();
		draw_rectangle(xCo, yCo, xCo + width, yCo + height);
		set_color(cWHITE);
		draw_line(xCo, yCo, xCo + width, yCo + height);
	}
};
class tria :public shape {
private:
	int heigth;
public:
	tria() :shape(), heigth(0) { }
	tria(int x, int y, int h, color fc, style fs):shape(x,y,fc,fs), heigth(h){ }
	void draw{
	      shape::draw();
	draw_pyramid(xCo, yCo, heigth);
	}
};
int main() {
	int j;
	init_graphics();
	shape* pShape[3];
	pShape[0] = new ball(40, 30, 20, cBLUE, X_FILL);
	pShape[1] = new rect(10, 11, 12, 13, cGREEN, SOLID_FILL);
	pShape[2] = new tria(14, 15, 10, cRED, MEDIUM_FILL);
	for (j = 0; j < 3; j++) {
		pShape[j]->draw();
	}
	for (j = 0; j < 3; j++) {
		delete pShape[j];
	}
	set_cursor_por(1, 25);
	return 0;
}
